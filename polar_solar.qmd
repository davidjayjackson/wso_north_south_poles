
---
title: Rodney's Solar Polar Data
date: 2024-05-30
format: html
jupyter: python3
---

```{python}
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.seasonal import STL
from scipy.signal import find_peaks
import os
```

# Load the data

```{python}
file_path = './WSO.csv'
data = pd.read_csv(file_path)
```

# Display the first few rows of the dataset
```{python}
data.head()
```

# Identify data types of each column

```{python}
data_types = data.dtypes
data_types
```

# Check for missing values in the dataset

```{python}
missing_values = data.isnull().sum()
missing_values
```

# Replace 'XXX' with NaN in the affected columns
```{python}
data.replace('XXX', pd.NA, inplace=True)
```

# Convert the affected columns to numeric types
```{python}
data['g_n'] = pd.to_numeric(data['g_n'], errors='coerce')
data['g_s'] = pd.to_numeric(data['g_s'], errors='coerce')
data['R_n'] = pd.to_numeric(data['R_n'], errors='coerce')
data['R_s'] = pd.to_numeric(data['R_s'], errors='coerce')
```

# Generate summary statistics for the numeric columns

```{python}
summary_statistics = data.describe()
summary_statistics
```

# Calculate the Interquartile Range (IQR) for each numeric column

```{python}
# Calculate the Interquartile Range (IQR) for each numeric column
# Q1 = data.quantile(0.25)
# Q3 = data.quantile(0.75)
# IQR = Q3 - Q1

# Display the calculated IQR values
# print("Interquartile Range (IQR) for each numeric column:")
# print(IQR)

```

# Calculate skewness and kurtosis for each numeric column

```{python}
skewness = data.skew(numeric_only=True)
kurtosis = data.kurtosis(numeric_only=True)
skewness
```
```{python}
kurtosis
```
# Create histograms for each numeric column
```{python}
numeric_columns = ['g_n', 'g_s', 'a', 'R_n', 'R_s', 'Rr']
plt.figure(figsize=(15, 10))
for i, col in enumerate(numeric_columns, 1):
    plt.subplot(2, 3, i)
    plt.hist(data[col].dropna(), bins=30, edgecolor='black')
    plt.title(f'Histogram of {col}')
    plt.xlabel(col)
    plt.ylabel('Frequency')
plt.tight_layout()
plt.show()
```
# Create boxplots for each numeric column
```{python}

plt.figure(figsize=(15, 10))
for i, col in enumerate(numeric_columns, 1):
    plt.subplot(2, 3, i)
    plt.boxplot(data[col].dropna(), vert=False)
    plt.title(f'Boxplot of {col}')
    plt.xlabel(col)
plt.tight_layout()
plt.show()
```
# Calculate the correlation matrix for the numeric columns

```{python}
correlation_matrix = data[numeric_columns].corr()
correlation_matrix
```


# Display the correlation matrix as a heatmap

```{python}
plt.figure(figsize=(10, 8))
plt.imshow(correlation_matrix, cmap='coolwarm', interpolation='none')
plt.colorbar()
plt.xticks(range(len(correlation_matrix.columns)), correlation_matrix.columns, rotation=90)
plt.yticks(range(len(correlation_matrix.columns)), correlation_matrix.columns)
plt.title('Correlation Matrix Heatmap')
plt.show()
```
# Convert 'Ymd' and 'hhmm' columns to a single datetime column

```{python}
data['datetime'] = pd.to_datetime(data['Ymd'] + ' ' + data['hhmm'])

```
# Set the datetime column as the index

```{python}
data.set_index('datetime', inplace=True)
```
# Resample the data to a daily frequency and forward fill any missing values

```{python}
data_daily = data.resample('D').mean().ffill()
```
# Decompose the time series for each numeric column
```{python}
for col in numeric_columns:
    stl = STL(data_daily[col].dropna(), seasonal=13).fit()
    trend = stl.trend
    seasonal = stl.seasonal
    residual = stl.resid
```
# Plot the decomposed components

```{python}
    plt.figure(figsize=(12, 8))
    plt.subplot(4, 1, 1)
    plt.plot(data_daily[col], label='Original', color='blue')
    plt.title(f'STL Decomposition of {col}')
    plt.legend()
    plt.subplot(4, 1, 2)
    plt.plot(trend, label='Trend', color='red')
    plt.legend()
    plt.subplot(4, 1, 3)
    plt.plot(seasonal, label='Seasonality', color='green')
    plt.legend()
    plt.subplot(4, 1, 4)
    plt.plot(residual, label='Residual', color='orange')
    plt.legend()
    plt.tight_layout()
    plt.show()
```
# Identify peaks and valleys for the trend component

```{python}
    peaks, _ = find_peaks(trend.dropna())
    valleys, _ = find_peaks(-trend.dropna())
```

# Plot the trend with peaks and valleys highlighted

```{python}
    plt.figure(figsize=(12, 6))
    plt.plot(trend, label='Trend', color='red')
    plt.plot(trend.index[peaks], trend[peaks], "x", label='Peaks', color='green')
    plt.plot(trend.index[valleys], trend[valleys], "o", label='Valleys', color='blue')
    plt.title(f'Trend Component with Peaks and Valleys for {col}')
    plt.legend()
    plt.xlabel('Datetime')
    plt.ylabel(f'{col} Trend')
    plt.show()
```
# Save the plots to files
```{python}
plot_dir = './'
os.makedirs(plot_dir, exist_ok=True)
for col in numeric_columns:
    # Generate histogram
    fig, ax = plt.subplots()
    data[col].dropna().hist(ax=ax, bins=30, edgecolor='black')
    ax.set_title(f'Histogram of {col}')
    ax.set_xlabel(col)
    ax.set_ylabel('Frequency')
    hist_path = os.path.join(plot_dir, f'hist_{col}.png')
    fig.savefig(hist_path)
    plt.close(fig)

    # Generate boxplot
    fig, ax = plt.subplots()
    ax.boxplot(data[col].dropna(), vert=False)
    ax.set_title(f'Boxplot of {col}')
    ax.set_xlabel(col)
    boxplot_path = os.path.join(plot_dir, f'boxplot_{col}.png')
    fig.savefig(boxplot_path)
    plt.close(fig)

# Generate correlation heatmap
fig, ax = plt.subplots(figsize=(10, 8))
cax = ax.matshow(correlation_matrix, cmap='coolwarm')
fig.colorbar(cax)
ax.set_xticks(range(len(correlation_matrix.columns)))
ax.set_xticklabels(correlation_matrix.columns, rotation=90)
ax.set_yticks(range(len(correlation_matrix.columns)))
ax.set_yticklabels(correlation_matrix.columns)
ax.set_title('Correlation Matrix Heatmap')
corr_heatmap_path = os.path.join(plot_dir, 'correlation_heatmap.png')
fig.savefig(corr_heatmap_path)
plt.close(fig)

# Generate STL decomposition plots
for col in numeric_columns:
    stl = STL(data_daily[col].dropna(), seasonal=13).fit()
    trend = stl.trend
    seasonal = stl.seasonal
    residual = stl.resid

    fig, axs = plt.subplots(4, 1, figsize=(12, 8))
    axs[0].plot(data_daily[col], label='Original', color='blue')
    axs[0].set_title(f'STL Decomposition of {col}')
    axs[0].legend()

    axs[1].plot(trend, label='Trend', color='red')
    axs[1].legend()

    axs[2].plot(seasonal, label='Seasonality', color='green')
    axs[2].legend()

    axs[3].plot(residual, label='Residual', color='orange')
    axs[3].legend()

    fig.tight_layout()
    stl_path = os.path.join(plot_dir, f'stl_{col}.png')
    fig.savefig(stl_path)
    plt.close(fig)

    peaks, _ = find_peaks(trend.dropna())
    valleys, _ = find_peaks(-trend.dropna())

    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(trend, label='Trend', color='red')
    ax.plot(trend.index[peaks], trend[peaks], "x", label='Peaks', color='green')
    ax.plot(trend.index[valleys], trend[valleys], "o", label='Valleys', color='blue')
    ax.set_title(f'Trend Component with Peaks and Valleys for {col}')
    ax.legend()
    ax.set_xlabel('Datetime')
    ax.set_ylabel(f'{col} Trend')
    peaks_valleys_path = os.path.join(plot_dir, f'peaks_valleys_{col}.png')
    fig.savefig(peaks_valleys_path)
    plt.close(fig)

# Create a zip file containing all the plots
zip_file_path = '/mnt/data/plots.zip'
with zipfile.ZipFile(zip_file_path, 'w') as zipf:
    for root, dirs, files in os.walk(plot_dir):
        for file in files:
            zipf.write(os.path.join(root, file), arcname=file)
"""

# Write the Python code to a file
python_code_path = '/mnt/data/data_analysis_code.py'
with open(python_code_path, 'w') as file:
    file.write(python_code)

python_code_path
